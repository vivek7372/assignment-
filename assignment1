{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e4d020da-662e-4957-8277-9aab8f24174d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Q1.Who developed python programming language ?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "3a27fa94-f02c-45c0-9a03-a95a173cb009",
   "metadata": {},
   "outputs": [],
   "source": [
    "#answer=Python was developed by Guido van Rossum,\n",
    "#a Dutch programmer, in the late 1980s and early 1990s.\n",
    "#Guido van Rossum is often referred to \n",
    "#as the \"Benevolent Dictator For Life\"(BDFL) \n",
    "#of the Python programming language."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "a5c7310f-018d-4c15-b80a-289146524c69",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Q2.Which type of programming does python support ?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "44695149-e371-4aba-9342-c8c919e3f581",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "#answer=Python supports several types of programming, including:\n",
    "#1.Procedural Programming: Python allows you to write procedural code,\n",
    "#which involves writing a series of step-by-step instructions for the computerto follow. \n",
    "#In procedural programming,\n",
    "# you break down a problem into a series of smaller tasks and solve them one by one.\n",
    "#2.Object-Oriented Programming (OOP): Python has strong support for object-oriented programming. It allows you to define classes and create objects that encapsulate data and behavior. \n",
    "#OOP promotes modular and reusable code by organizing data and functions into objects and classes.\n",
    "#3.Functional Programming: Python also supports functional programming paradigms.\n",
    "#Functional programming involves treating computation as the evaluation of mathematical functions and avoiding changing state and mutable data.\n",
    "#Python provides features such as lambda functions, higher-order functions, and list comprehensions, which are commonly used in functional programming.\n",
    "#4.scripting: Python is often used as a scripting language.\n",
    "#Scripting involves writing small programs or scripts that automate specific tasks or perform certain operations. \n",
    "#Python's concise syntax and built-in libraries make it well-suited for scripting tasks, such as file manipulation, data processing, and automation.\n",
    "#5.Web Development: Python offers frameworks like Django and Flask that make web development efficient and straightforward.\n",
    "#These frameworks provide tools and libraries to handle web-related tasks, such as routing, handling HTTP requests and responses, interacting with databases,\n",
    "#and generating dynamic content.\n",
    "#6.Data Science and Analytics: Python has become a popular choice for data analysis,\n",
    "#scientific computing, and machine learning. Libraries like NumPy, Pandas, and SciPy provide powerful tools\n",
    "#for numerical computations and data manipulation. Additionally, libraries such as TensorFlow, PyTorch, and \n",
    "#scikit-learn enable machine learning and artificial intelligence tasks.\n",
    "#7.Automation and System Administration: Python is frequently used for automation and system administration tasks. \n",
    "#It provides modules and libraries to interact with the operating system, manage files and directories, \n",
    "#automate repetitive tasks, and create scripts for system administration purposes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "1aff1e8c-eb9f-4a79-baa6-db62be6ebf15",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Q3.Is python case sensitive when dealing with identifiers?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "6dda4ae2-dc17-4bb4-a01a-d2914aa4ec4c",
   "metadata": {},
   "outputs": [],
   "source": [
    "#answer=Yes,Python is case sensitive when dealing with identifiers.\n",
    "#This means that Python considers uppercase and\n",
    "#lowercase letters as distinct characters, \n",
    "#and the capitalization of identifiers \n",
    "# (such as variable names, function names, class names, etc.) matters."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "7276a491-9f31-443f-8228-66c93e3107f8",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Q4.What is the file extension of the python file?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "7b1ff1b5-7188-4417-bf05-944200af2d5a",
   "metadata": {},
   "outputs": [],
   "source": [
    "#answer= When you save a Python file, it is recommended to give it a name that reflects\n",
    "#its purpose and end it with the .py extension. For example, \n",
    "#if you have a Python file that contains code \n",
    "#for a web scraper, you could name it webscraper.py.\n",
    "#Using the .py file extension \n",
    "#helps to indicate that the file contains Python code and allows \n",
    "#the operating system and text editors to recognize it as a Python file.\n",
    "#It also helps in distinguishing\n",
    "#Python files from files of other programming languages or file types."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "fe3dae7e-ac2b-4a48-a7af-9ae78a3377d2",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Q5.Is python code compiled or interupted?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "86b4c7d9-7172-4a20-8ad8-22af7258322c",
   "metadata": {},
   "outputs": [],
   "source": [
    "#answer= 1.Compilation: When you write Python code,\n",
    "#it is first compiled into bytecode by the Python interpreter. \n",
    "#The bytecode is a lower-level representation of the code \n",
    "#that is closer to machine language but still independent of any specific computer architecture. \n",
    "#The compilation step occurs automatically and is transparent to the developer.\n",
    "#2.Interpretation: Once the code is compiled into bytecode,\n",
    "#the Python interpreter executes the bytecode line by line. \n",
    "#The interpreter reads each bytecode instruction and performs the corresponding operation. \n",
    "#This process is known as interpretation.\n",
    "#The interpreter dynamically translates the bytecode into machine code and executes it."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "d108221a-de84-46dc-b013-ce77f44f4beb",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Q6.Name a few blocks of code used to define in python language?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "9245e8fd-ebe4-46c9-a216-0d3f24b1c2f9",
   "metadata": {},
   "outputs": [],
   "source": [
    "#answer=In Python, there are several blocks of code that are commonly used for defining\n",
    "#different structures and functionalities. Here are a few notable blocks of code:\n",
    "#1.Function: Functions in Python are defined using the def keyword,\n",
    "#followed by the function name, parameters, and a colon. \n",
    "#The code block for the function is indented below the function definition.\n",
    "#2.Conditional Statements: Conditional statements allow you \n",
    "#to execute different blocks of code based on certain conditions.\n",
    "#The if, elif (else if), and else keywords are used for conditional branching.\n",
    "#The code block for each branch is indented below the corresponding conditional statement. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "b9329dd1-0671-48e9-8574-eb984eec5f15",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Q7.State a character used to give single line comment in python?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "535d046a-ad5d-485a-aa90-6e6462d83892",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Answer=In Python, the # character is used to denote a single-line comment. \n",
    "#Anything written after the character on the same line is considered a comment \n",
    "#and is ignored by the Python interpreter.\n",
    "# for example:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "d4c500d0-5641-4d82-92c6-a1a2caac7472",
   "metadata": {},
   "outputs": [],
   "source": [
    "#this is my assignment."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "e89bad2c-ffb6-40ad-8228-f2672c71024f",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Q9.Python support the creation of anonymous function at runtime ,using a construct called_________"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "eb44d5cb-3d40-4dfd-9a84-cac16eb72c84",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Answer=Python supports the creation of anonymous functions\n",
    "#at runtime using a construct called \"lambda\" functions. for example"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "9d6a6b7c-ca0b-4238-9374-b8a8ab81da9e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<function __main__.<lambda>(n, p)>"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lambda n,p:n**p"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "98460c1f-fc81-4666-8f07-99b8efb7f8d0",
   "metadata": {},
   "outputs": [],
   "source": [
    "finding_max = lambda x,y:x if x>y else y "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "04a14ce1-fd60-4e3f-aae5-c33be7e2b5c1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "34"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "finding_max(34,23)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "949c86e2-dcd6-4e04-adba-f1e80ce185b3",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Q10.what does pip stand for python?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "0d0cee76-5370-45c4-8cb2-9ad2c4aa49e5",
   "metadata": {},
   "outputs": [],
   "source": [
    "#answer=\"pip\" stands for \"Pip Installs Packages.\" It is a package manager for Python, used to install, manage, \n",
    "#and uninstall software packages (libraries) written in Python. \n",
    "#Pip is the standard package manager for Python and is\n",
    "#included by default in most Python installations.\n",
    "#Pip simplifies the process of installing \n",
    "#external libraries and dependencies needed for Python projects.\n",
    "#It retrieves packages from the Python Package Index (PyPI), \n",
    "#a central repository for Python packages, \n",
    "#and installs them into the Python environment.\n",
    "#With Pip, you can easily install packages by executing commands like pip install package_name.\n",
    "#Pip also provides features for managing package versions,\n",
    "#creating virtual environments, upgrading packages, and uninstalling packages.\n",
    "#Here are a few common Pip commands:\n",
    "#pip install package_name: Installs the specified package.\n",
    "#pip install -r requirements.txt: Installs packages listed in a requirements file.\n",
    "#pip uninstall package_name: Uninstalls the specified package.\n",
    "#pip freeze: Displays a list of installed packages and their versions.\n",
    "#pip search package_name: Searches for packages available on PyPI.\n",
    "#Pip greatly facilitates the management of Python packages, \n",
    "#making it convenient for developers to utilize and distribute libraries, \n",
    "#ensuring smooth integration and collaboration in Python projects"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "93056101-a55c-488a-9191-b12e1440c951",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Q11.Mention a few built-in function in python?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "115ff584-74ac-4f1d-9d70-4579d4a47ff7",
   "metadata": {},
   "outputs": [],
   "source": [
    "#answer=Python provides several built-in functions\n",
    "#that are available without requiring any import statement.\n",
    "#These functions are part of the Python standard library \n",
    "#and can be used directly in your code.\n",
    "#Here are a few commonly used built-in functions in Python:\n",
    "\n",
    "#1. `print()`: Outputs text or variables to the console.\n",
    "#2. `len()`: Returns the length (number of items) of an object, such as a string, list, or tuple.\n",
    "#3. `type()`: Returns the type of an object.\n",
    "#4. `input()`: Reads input from the user via the console.\n",
    "#5. `int()`: Converts a value to an integer.\n",
    "#6. `float()`: Converts a value to a floating-point number.\n",
    "#7. `str()`: Converts a value to a string.\n",
    "#8. `list()`: Converts an iterable to a list.\n",
    "#9. `dict()`: Creates a dictionary object.\n",
    "#10. `range()`: Generates a sequence of numbers.\n",
    "#11. `max()`: Returns the maximum value from a sequence or a set of arguments.\n",
    "#12. `min()`: Returns the minimum value from a sequence or a set of arguments.\n",
    "#13. `sum()`: Returns the sum of all elements in a sequence.\n",
    "#14. `sorted()`: Returns a new sorted list from an iterable.\n",
    "#15. `abs()`: Returns the absolute value of a number.\n",
    "#16. `round()`: Rounds a number to a specified number of decimal places.\n",
    "#17. `open()`: Opens a file for reading or writing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "c980ee1e-8b94-4088-ac1e-2dbe309e8493",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Q12.what is the maximum possible length of an identifier in python?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "7a12eeb1-eb9a-4a7e-81a4-bfd06be13a97",
   "metadata": {},
   "outputs": [],
   "source": [
    "#answer=In Python, the maximum possible length of an identifier\n",
    "#(variable name, function name, etc.) is not explicitly defined.\n",
    "#However, Python imposes a practical limit on the length of an identifier.\n",
    "#According to the Python language reference, an identifier can be of any length, but only the first 255 characters are significant. In other words, Python considers only the first 255 characters of an identifier to distinguish between different names.\n",
    "#For example, "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "eb4137eb-11a3-4d49-b26b-5914c91ef0a8",
   "metadata": {},
   "outputs": [],
   "source": [
    "this_is_a_very_long_variable_name_that_exceeds_the_255_character_limit_but_python_will_ignore_the_remaining_characters = 42"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "52bae6ef-c0c9-40b0-bdfd-26ad3b6471d7",
   "metadata": {},
   "outputs": [],
   "source": [
    "#In the above code, even though the identifier name exceeds 255 characters,\n",
    "#Python will consider only the first 255 characters when identifying the variable.\n",
    "\n",
    "#It's important to note that using excessively long identifiers can reduce the readability and maintainability\n",
    "# of your code. It is generally recommended to use meaningful and concise names for your identifiers to \n",
    "# make the code more understandable."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "cb4af410-4a2c-456f-be4a-a01c730dbc56",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Q13.What is the benefit to using python ?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "740954b6-16ce-460b-916b-f01d19a2b237",
   "metadata": {},
   "outputs": [],
   "source": [
    "#answer=There are several benefits to using Python as a programming language:\n",
    "\n",
    "#1. Readability and Simplicity: Python has a clean and readable syntax, \n",
    "#making it easy to understand and write code. Its simplicity allows developers \n",
    "#to express concepts in fewer lines of code compared to other programming languages,\n",
    "#leading to increased productivity and reduced development time.\n",
    "\n",
    "#2. Large and Active Community: Python has a large and active community of developers who contribute\n",
    "#to its growth and development. This community provides extensive support, resources, and libraries \n",
    "#that make it easier to solve problems and accelerate development. It also means that there is a wealth of \n",
    "#documentation and tutorials available, making it easier to learn and master Python.\n",
    "\n",
    "#3. Versatility and Portability: Python is a versatile language that can be used for various purposes,\n",
    "#including web development, scientific computing, data analysis, machine learning, automation, and more.\n",
    "#It runs on different platforms and operating systems, making Python code portable and easily deployable.\n",
    "\n",
    "#4. Extensive Ecosystem of Libraries and Frameworks: Python has a rich ecosystem of libraries and frameworks \n",
    "#that cater to a wide range of applications and domains. Libraries such as NumPy, Pandas, TensorFlow, scikit-learn, \n",
    "#and Django provide powerful tools for scientific computing, data manipulation, machine learning, and web development. \n",
    "#This vast collection of libraries allows developers to leverage existing solutions and accelerate development.\n",
    "\n",
    "#5. Integration and Interoperability: Python can easily integrate with other programming languages such as C, C++, Java, and more. \n",
    "#It has robust support for APIs and libraries that facilitate interaction with other systems and technologies.\n",
    "# Python can be used as a scripting language, allowing developers to glue different components together and create complex systems.\n",
    "\n",
    "#6. Cross-Platform Compatibility: Python code can be executed on various platforms, \n",
    "#including Windows, macOS, Linux, and more. This cross-platform compatibility ensures that Python applications \n",
    "#can run seamlessly on different systems without major modifications.\n",
    "\n",
    "#7. Strong in Data Analysis and Scientific Computing: Python has become a preferred language for data analysis, scientific computing, and machine learning.\n",
    "#Its rich ecosystem of libraries, such as NumPy, Pandas, Matplotlib, and SciPy, provides \n",
    "#efficient tools for data manipulation, visualization, statistical analysis, and numerical computations.\n",
    "\n",
    "#These are just a few of the benefits that make Python a popular and widely used programming language. Its simplicity, readability, extensive libraries,\n",
    "#and active community make it an excellent choice for a wide range of applications, from small scripting tasks to large-scale projects."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "69728c0f-c385-4e68-be3c-5c32c87505e7",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Q14.how is memory manage in python?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "d803bda2-b006-4bf5-8620-dd0e699cf3fb",
   "metadata": {},
   "outputs": [],
   "source": [
    "# answer=Memory management in Python is primarily handled by its built-in memory manager,\n",
    "#which is responsible for allocating and deallocating memory for Python objects. \n",
    "#Python uses a combination of techniques, including reference counting and a garbage collector, \n",
    "#to manage memory efficiently. Here's an overview of how memory management works in Python:\n",
    "\n",
    "#1. Reference Counting: Python utilizes reference counting as its primary memory management technique. Each Python object has a reference count associated with it, which keeps track of the number of references to the object. When an object's reference count reaches zero, meaning there are no more references to it, Python deallocates the memory occupied by that object.\n",
    "\n",
    "#2. Garbage Collection: In addition to reference counting, Python employs a garbage collector to handle cyclic references. Cyclic references occur when objects refer to each other in a way that forms a loop, making it impossible to determine their lifetimes through reference counting alone. The garbage collector periodically identifies and collects objects that are no longer reachable due to cyclic references, freeing up memory.\n",
    "\n",
    "#3. Memory Pool: Python employs a memory pool mechanism to efficiently manage memory allocation and deallocation. The memory pool preallocates a fixed block of memory and manages it internally, optimizing the allocation and release of smaller memory chunks requested by Python objects. This helps reduce the overhead of frequent memory allocation and deallocation operations.\n",
    "\n",
    "#4. Automatic Memory Management: Python's memory management is automatic and transparent to the programmer. Developers do not need to explicitly allocate or deallocate memory for objects as memory management is handled by the interpreter. Python takes care of memory allocation when objects are created and automatically frees memory when objects are no longer referenced.\n",
    "\n",
    "#5. Optimizations: Python's memory manager includes several optimizations to improve memory usage and performance. These include strategies like object reuse, memory compaction, and efficient allocation of memory blocks.\n",
    "\n",
    "#It's important to note that Python's memory management system handles most memory-related tasks automatically. However, it's still essential to be mindful of memory usage and avoid unnecessary object creation or retaining references to objects when they are no longer needed, as excessive memory usage can impact performance."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "71950ee1-98f0-4f78-a88d-6d28f8147633",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Q15.How to install python on windows and set path of variable?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "f1b2e490-91ac-401c-bc34-ac36da9a8143",
   "metadata": {},
   "outputs": [],
   "source": [
    "#answer=To install Python on Windows and set the path variable, follow these steps:\n",
    "\n",
    "#1. Download Python: Visit the official Python website at www.python.org and go to the Downloads section. \n",
    "#Choose the latest version of Python for Windows and download the installer executable (.exe file).\n",
    "\n",
    "#2. Run the Installer: Locate the downloaded .exe file and double-click on it to run the installer. \n",
    "#Ensure that you have administrative privileges to install software on your computer.\n",
    "\n",
    "#3. Customize Installation (Optional): On the installation screen, you have the option to customize the installation. \n",
    "#You can choose the installation location, select optional features, and modify advanced options if needed.\n",
    "#For most users, the default settings are sufficient, so you can proceed by clicking on the \"Install Now\" button.\n",
    "\n",
    "#4. Add Python to Path (Important Step): On the \"Customize Python\" screen,\n",
    "#make sure to check the box that says \"Add Python to PATH\" and click on the \"Install Now\" button. \n",
    "#This step ensures that the Python executable can be accessed from any location in the command prompt.\n",
    "\n",
    "#5. Wait for Installation: The installer will now install Python on your system. \n",
    "#You may need to wait a few moments for the installation to complete.\n",
    "\n",
    "#6. Verify Installation: Once the installation is finished, \n",
    "#you can verify it by opening the command prompt and typing `python --version`. \n",
    "#It should display the installed Python version.\n",
    "\n",
    "#7. Set Path Variable (if not added during installation): If you missed checking the \n",
    "#\"Add Python to PATH\" option during installation or want to add it later, you can set the path variable manually. Follow these steps:\n",
    "   #- Open the Control Panel and go to System and Security -> System.\n",
    "  #- Click on \"Advanced system settings\" on the left side.\n",
    "   #- In the System Properties window, click on the \"Environment Variables\" button.\n",
    "   #- In the Environment Variables window, locate the \"Path\" variable under \"System variables\" and click on the \"Edit\" button.\n",
    "   #- Add the path to the Python installation directory (e.g., `C:\\Python39`) at the end of the \"Variable value\" field. Ensure that you separate it from the existing paths with a semicolon (;).\n",
    "   #- Click \"OK\" on all the windows to save the changes.\n",
    "\n",
    "#Once the path variable is set, you can open a new command prompt window and type `python` to start the Python interpreter. \n",
    "#Now you should be able to run Python code from anywhere on your Windows system.\n",
    "\n",
    "#Note: The steps may vary slightly depending on your Windows version, but the overall process remains similar."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "412bd1ab-4ac0-4472-b040-7cec3b20113e",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Q16.Is identation required in python?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "022d9d85-12ac-40cb-870e-a5ceda594a8b",
   "metadata": {},
   "outputs": [],
   "source": [
    "#answer= Yes, indentation is required in Python.\n",
    "#In Python, indentation is used to define the structure and hierarchy of the code. \n",
    "#It is not just for visual formatting but is a fundamental part of the language syntax.\n",
    "\n",
    "#Unlike other programming languages that use curly braces or keywords to denote code blocks, \n",
    "#Python uses indentation to indicate the beginning and end of blocks of code.\n",
    "#Indentation is used to group statements together\n",
    "#within control flow structures such as loops, conditional statements, and function definitions.\n",
    "\n",
    "#The standard convention in Python is to use four spaces for indentation.\n",
    "#You can also use a tab character, but it's important to be consistent throughout your codebase. \n",
    "#Mixing spaces and tabs for indentation can lead to syntax errors.\n",
    "\n",
    "#Here's an example to illustrate the importance of indentation in Python:\n",
    "\n",
    "#```python\n",
    "#if condition:\n",
    "   # statement1  # Indented code block\n",
    "    # statement2\n",
    "#else:\n",
    "    #statement3  # Indented code block\n",
    "    #statement4\n",
    "#```\n",
    "\n",
    "#In the above code, the indentation helps Python understand which statements belong to the\n",
    "#`if` block and which statements are part of the `else` block. Incorrect indentation \n",
    "#can result in syntax errors or logical errors in your code.\n",
    "\n",
    "#So, it's crucial to maintain proper \n",
    "#indentation in Python to ensure that your code is valid \n",
    "#and functions as intended."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2cad233c-b763-4570-aabd-8ef6e3261701",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
